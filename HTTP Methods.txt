HTTP Methods
Forms, Data Transferring, and Routing Rules
The modern internet is user-driven; all the actual content of a website is generated by the users of a website.  How does the user manage to get his or her data to the page??  One word: forms.  The HTML forms you are used to building is the way in which users are able to pass data to the back end of a website where it can be processed and stored.  Designing forms and processing the information correctly is a huge part of what it takes to become a back-end developer.  

HTTP Methods: GET and POST
If you are not already familiar with HTTP request methods, here's a brief run-down on the two most common: GET and POST. 

GET is a request is for passing insensitive information 
POST is a request is for passing sensitive information. 
When you create a form tag in HTML, you always need to specify the method used to send the request. The method attribute specifies the type of HTTP request by how you, as the developer, want to have your form information transferred. If your form data contains password data, credit card numbers, SSNs, etc, please use POST! If the information is like a library search or something insensitive, it's OK to use GET as your method.

GET
GET requests are sent as part of the URL. Ever noticed that when you do a Google search, your search term appears in the resulting URL? That's because it's a GET! That wouldn't be very secure for passwords! Imagine if every time you logged into Gmail, it displayed your password at the top of the screen, right in your URL for the world to see! Worse still, GET requests can be cached, and will even remain stored in your browser's history! So why use GET at all?? Well one neat thing, GET requests can be bookmarked! This lets you bookmark routes on say Google Earth, or image results on a search engine.

POST 
POST requests send data behind the scenes, in the HTTP message body.  They're never cached, they don't linger in your browser history, they can't be bookmarked, and there are no restrictions on how much data you can send. The vast majority of HTTP request methods you'll be dealing with will be POSTs. Forms that control user registration, user authentication, user authorization, database inserts, updates, and deletes, all of these will be sent by the POST method.